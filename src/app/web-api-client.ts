/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap, catchError } from 'rxjs/operators';
import { Observable, throwError, of } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IAdminWalletClient {
    create(command: CreateAdminWallet): Observable<Result>;
    update(command: UpdateAdminWalletCommand): Observable<Result>;
    getAll(): Observable<AdminWalletDTO[]>;
    getById(id: string): Observable<AdminWalletDTO>;
    getByType(type: string | null): Observable<AdminWalletDTO>;
}

@Injectable({
    providedIn: 'root'
})
export class AdminWalletClient implements IAdminWalletClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    create(command: CreateAdminWallet): Observable<Result> {
        let url_ = this.baseUrl + "/api/AdminWallet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(mergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>throwError(e);
                }
            } else
                return <Observable<Result>><any>throwError(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 400) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return of(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return of<Result>(<any>null);
    }

    update(command: UpdateAdminWalletCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/AdminWallet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(mergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>throwError(e);
                }
            } else
                return <Observable<Result>><any>throwError(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return of(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return of<Result>(<any>null);
    }

    getAll(): Observable<AdminWalletDTO[]> {
        let url_ = this.baseUrl + "/api/AdminWallet";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(mergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(catchError((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<AdminWalletDTO[]>><any>throwError(e);
                }
            } else
                return <Observable<AdminWalletDTO[]>><any>throwError(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<AdminWalletDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AdminWalletDTO.fromJS(item));
            }
            return of(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return of<AdminWalletDTO[]>();
    }

    getById(id: string): Observable<AdminWalletDTO> {
        let url_ = this.baseUrl + "/api/AdminWallet/ById/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(mergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(catchError((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(<any>response_);
                } catch (e) {
                    return <Observable<AdminWalletDTO>><any>throwError(e);
                }
            } else
                return <Observable<AdminWalletDTO>><any>throwError(response_);
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<AdminWalletDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AdminWalletDTO.fromJS(resultData200);
            return of(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return of<AdminWalletDTO>(<any>null);
    }

    getByType(type: string | null): Observable<AdminWalletDTO> {
        let url_ = this.baseUrl + "/api/AdminWallet/ByType/{type}";
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined.");
        url_ = url_.replace("{type}", encodeURIComponent("" + type));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(mergeMap((response_ : any) => {
            return this.processGetByType(response_);
        })).pipe(catchError((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetByType(<any>response_);
                } catch (e) {
                    return <Observable<AdminWalletDTO>><any>throwError(e);
                }
            } else
                return <Observable<AdminWalletDTO>><any>throwError(response_);
        }));
    }

    protected processGetByType(response: HttpResponseBase): Observable<AdminWalletDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AdminWalletDTO.fromJS(resultData200);
            return of(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return of<AdminWalletDTO>(<any>null);
    }
}

export interface IBlockedWalletClient {
    create(command: CreateBlockedWallet): Observable<Result>;
    getAll(): Observable<BlockedWalletDTO[]>;
    getByWallet(wallet: string | null): Observable<boolean>;
    delete(id: string): Observable<Result>;
}

@Injectable({
    providedIn: 'root'
})
export class BlockedWalletClient implements IBlockedWalletClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    create(command: CreateBlockedWallet): Observable<Result> {
        let url_ = this.baseUrl + "/api/BlockedWallet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(mergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>throwError(e);
                }
            } else
                return <Observable<Result>><any>throwError(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 400) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return of(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return of<Result>(<any>null);
    }

    getAll(): Observable<BlockedWalletDTO[]> {
        let url_ = this.baseUrl + "/api/BlockedWallet";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(mergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(catchError((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<BlockedWalletDTO[]>><any>throwError(e);
                }
            } else
                return <Observable<BlockedWalletDTO[]>><any>throwError(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<BlockedWalletDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BlockedWalletDTO.fromJS(item));
            }
            return of(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return of<BlockedWalletDTO[]>();
    }

    getByWallet(wallet: string | null): Observable<boolean> {
        let url_ = this.baseUrl + "/api/BlockedWallet/byWallet/{wallet}";
        if (wallet === undefined || wallet === null)
            throw new Error("The parameter 'wallet' must be defined.");
        url_ = url_.replace("{wallet}", encodeURIComponent("" + wallet));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(mergeMap((response_ : any) => {
            return this.processGetByWallet(response_);
        })).pipe(catchError((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetByWallet(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>throwError(e);
                }
            } else
                return <Observable<boolean>><any>throwError(response_);
        }));
    }

    protected processGetByWallet(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return of(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return of<boolean>(<any>null);
    }

    delete(id: string): Observable<Result> {
        let url_ = this.baseUrl + "/api/BlockedWallet/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(mergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(catchError((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>throwError(e);
                }
            } else
                return <Observable<Result>><any>throwError(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return of(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return of<Result>(<any>null);
    }
}

export interface IGeneralSettingClient {
    update(command: UpdateGeneralSettingsCommand): Observable<Result>;
    get(): Observable<GeneralSettingDTO>;
}

@Injectable({
    providedIn: 'root'
})
export class GeneralSettingClient implements IGeneralSettingClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    update(command: UpdateGeneralSettingsCommand): Observable<Result> {
        let url_ = this.baseUrl + "/api/GeneralSetting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(mergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(catchError((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>throwError(e);
                }
            } else
                return <Observable<Result>><any>throwError(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 400) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return of(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return of<Result>(<any>null);
    }

    get(): Observable<GeneralSettingDTO> {
        let url_ = this.baseUrl + "/api/GeneralSetting";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(mergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(catchError((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<GeneralSettingDTO>><any>throwError(e);
                }
            } else
                return <Observable<GeneralSettingDTO>><any>throwError(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<GeneralSettingDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GeneralSettingDTO.fromJS(resultData200);
            return of(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return of<GeneralSettingDTO>(<any>null);
    }
}

export interface IIdentityClient {
    signUp(command: SignUpCommand): Observable<AuthResponse>;
    signIn(command: SignInCommand): Observable<FileResponse>;
    signOut(userId: string | null): Observable<AuthResponse>;
    changePassword(userId: string | null, newPassword: string | null): Observable<AuthResponse>;
    renewTokens(): Observable<string>;
    getRoles(userId: string | null): Observable<string[]>;
}

@Injectable({
    providedIn: 'root'
})
export class IdentityClient implements IIdentityClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    signUp(command: SignUpCommand): Observable<AuthResponse> {
        let url_ = this.baseUrl + "/api/Identity/SignUp";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(mergeMap((response_ : any) => {
            return this.processSignUp(response_);
        })).pipe(catchError((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSignUp(<any>response_);
                } catch (e) {
                    return <Observable<AuthResponse>><any>throwError(e);
                }
            } else
                return <Observable<AuthResponse>><any>throwError(response_);
        }));
    }

    protected processSignUp(response: HttpResponseBase): Observable<AuthResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthResponse.fromJS(resultData200);
            return of(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return of<AuthResponse>(<any>null);
    }

    signIn(command: SignInCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Identity/SignIn";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(mergeMap((response_ : any) => {
            return this.processSignIn(response_);
        })).pipe(catchError((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSignIn(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>throwError(e);
                }
            } else
                return <Observable<FileResponse>><any>throwError(response_);
        }));
    }

    protected processSignIn(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return of({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return of<FileResponse>(<any>null);
    }

    signOut(userId: string | null): Observable<AuthResponse> {
        let url_ = this.baseUrl + "/api/Identity/{userId}/SignOut";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(mergeMap((response_ : any) => {
            return this.processSignOut(response_);
        })).pipe(catchError((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSignOut(<any>response_);
                } catch (e) {
                    return <Observable<AuthResponse>><any>throwError(e);
                }
            } else
                return <Observable<AuthResponse>><any>throwError(response_);
        }));
    }

    protected processSignOut(response: HttpResponseBase): Observable<AuthResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthResponse.fromJS(resultData200);
            return of(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return of<AuthResponse>(<any>null);
    }

    changePassword(userId: string | null, newPassword: string | null): Observable<AuthResponse> {
        let url_ = this.baseUrl + "/api/Identity/{userId}/ChangePassword={newPassword}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        if (newPassword === undefined || newPassword === null)
            throw new Error("The parameter 'newPassword' must be defined.");
        url_ = url_.replace("{newPassword}", encodeURIComponent("" + newPassword));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(mergeMap((response_ : any) => {
            return this.processChangePassword(response_);
        })).pipe(catchError((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangePassword(<any>response_);
                } catch (e) {
                    return <Observable<AuthResponse>><any>throwError(e);
                }
            } else
                return <Observable<AuthResponse>><any>throwError(response_);
        }));
    }

    protected processChangePassword(response: HttpResponseBase): Observable<AuthResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthResponse.fromJS(resultData200);
            return of(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return of<AuthResponse>(<any>null);
    }

    renewTokens(): Observable<string> {
        let url_ = this.baseUrl + "/api/Identity/RenewTokens";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(mergeMap((response_ : any) => {
            return this.processRenewTokens(response_);
        })).pipe(catchError((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRenewTokens(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>throwError(e);
                }
            } else
                return <Observable<string>><any>throwError(response_);
        }));
    }

    protected processRenewTokens(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return of(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return of<string>(<any>null);
    }

    getRoles(userId: string | null): Observable<string[]> {
        let url_ = this.baseUrl + "/api/Identity/{userId}/GetRoles";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(mergeMap((response_ : any) => {
            return this.processGetRoles(response_);
        })).pipe(catchError((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoles(<any>response_);
                } catch (e) {
                    return <Observable<string[]>><any>throwError(e);
                }
            } else
                return <Observable<string[]>><any>throwError(response_);
        }));
    }

    protected processGetRoles(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return of(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return of<string[]>();
    }
}

export interface IOrderClient {
    createOrder(command: OrderCreate): Observable<string>;
    get(): Observable<Order[]>;
    getById(id: string | null | undefined): Observable<Order>;
}

@Injectable({
    providedIn: 'root'
})
export class OrderClient implements IOrderClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createOrder(command: OrderCreate): Observable<string> {
        let url_ = this.baseUrl + "/api/Order/createOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(mergeMap((response_ : any) => {
            return this.processCreateOrder(response_);
        })).pipe(catchError((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrder(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>throwError(e);
                }
            } else
                return <Observable<string>><any>throwError(response_);
        }));
    }

    protected processCreateOrder(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return of(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return of<string>(<any>null);
    }

    get(): Observable<Order[]> {
        let url_ = this.baseUrl + "/api/Order";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(mergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(catchError((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<Order[]>><any>throwError(e);
                }
            } else
                return <Observable<Order[]>><any>throwError(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<Order[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Order.fromJS(item));
            }
            return of(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return of<Order[]>();
    }

    getById(id: string | null | undefined): Observable<Order> {
        let url_ = this.baseUrl + "/api/Order/byId?";
        if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(mergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(catchError((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(<any>response_);
                } catch (e) {
                    return <Observable<Order>><any>throwError(e);
                }
            } else
                return <Observable<Order>><any>throwError(response_);
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<Order> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Order.fromJS(resultData200);
            return of(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return of<Order>(<any>null);
    }
}

export interface IPromocodeClient {
    create(command: CreatePromocode): Observable<Result>;
    getAll(): Observable<PromocodeDTO[]>;
    getByCode(code: string | null): Observable<PromocodeDTO>;
    delete(id: string): Observable<Result>;
}

@Injectable({
    providedIn: 'root'
})
export class PromocodeClient implements IPromocodeClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    create(command: CreatePromocode): Observable<Result> {
        let url_ = this.baseUrl + "/api/Promocode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(mergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(catchError((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>throwError(e);
                }
            } else
                return <Observable<Result>><any>throwError(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 400) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return of(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return of<Result>(<any>null);
    }

    getAll(): Observable<PromocodeDTO[]> {
        let url_ = this.baseUrl + "/api/Promocode/getAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(mergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(catchError((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PromocodeDTO[]>><any>throwError(e);
                }
            } else
                return <Observable<PromocodeDTO[]>><any>throwError(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PromocodeDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PromocodeDTO.fromJS(item));
            }
            return of(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return of<PromocodeDTO[]>();
    }

    getByCode(code: string | null): Observable<PromocodeDTO> {
        let url_ = this.baseUrl + "/api/Promocode/getByCode/{code}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(mergeMap((response_ : any) => {
            return this.processGetByCode(response_);
        })).pipe(catchError((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetByCode(<any>response_);
                } catch (e) {
                    return <Observable<PromocodeDTO>><any>throwError(e);
                }
            } else
                return <Observable<PromocodeDTO>><any>throwError(response_);
        }));
    }

    protected processGetByCode(response: HttpResponseBase): Observable<PromocodeDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PromocodeDTO.fromJS(resultData200);
            return of(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return of<PromocodeDTO>(<any>null);
    }

    delete(id: string): Observable<Result> {
        let url_ = this.baseUrl + "/api/Promocode/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(mergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(catchError((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>throwError(e);
                }
            } else
                return <Observable<Result>><any>throwError(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Result.fromJS(resultData200);
            return of(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(mergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return of<Result>(<any>null);
    }
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    extensions?: { [key: string]: any; } | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
            if (_data["extensions"]) {
                this.extensions = {} as any;
                for (let key in _data["extensions"]) {
                    if (_data["extensions"].hasOwnProperty(key))
                        this.extensions![key] = _data["extensions"][key];
                }
            }
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        if (this.extensions) {
            data["extensions"] = {};
            for (let key in this.extensions) {
                if (this.extensions.hasOwnProperty(key))
                    data["extensions"][key] = this.extensions[key];
            }
        }
        return data; 
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    extensions?: { [key: string]: any; } | undefined;
}

export class ValidationProblemDetails extends ProblemDetails implements IValidationProblemDetails {
    errors?: { [key: string]: string[]; } | undefined;

    constructor(data?: IValidationProblemDetails) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (_data["errors"]) {
                this.errors = {} as any;
                for (let key in _data["errors"]) {
                    if (_data["errors"].hasOwnProperty(key))
                        this.errors![key] = _data["errors"][key] !== undefined ? _data["errors"][key] : [];
                }
            }
        }
    }

    static override fromJS(data: any): ValidationProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationProblemDetails();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.errors) {
            data["errors"] = {};
            for (let key in this.errors) {
                if (this.errors.hasOwnProperty(key))
                    data["errors"][key] = this.errors[key];
            }
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IValidationProblemDetails extends IProblemDetails {
    errors?: { [key: string]: string[]; } | undefined;
}

export class Result implements IResult {
    succeeded?: boolean;
    errors?: string[] | undefined;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.succeeded = _data["succeeded"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(item);
            }
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["succeeded"] = this.succeeded;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item);
        }
        return data; 
    }
}

export interface IResult {
    succeeded?: boolean;
    errors?: string[] | undefined;
}

export class CreateAdminWallet implements ICreateAdminWallet {
    walletType?: string | undefined;
    wallet?: string | undefined;

    constructor(data?: ICreateAdminWallet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.walletType = _data["walletType"];
            this.wallet = _data["wallet"];
        }
    }

    static fromJS(data: any): CreateAdminWallet {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAdminWallet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["walletType"] = this.walletType;
        data["wallet"] = this.wallet;
        return data; 
    }
}

export interface ICreateAdminWallet {
    walletType?: string | undefined;
    wallet?: string | undefined;
}

export class UpdateAdminWalletCommand implements IUpdateAdminWalletCommand {
    id?: string;
    wallet?: string | undefined;

    constructor(data?: IUpdateAdminWalletCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.wallet = _data["wallet"];
        }
    }

    static fromJS(data: any): UpdateAdminWalletCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAdminWalletCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["wallet"] = this.wallet;
        return data; 
    }
}

export interface IUpdateAdminWalletCommand {
    id?: string;
    wallet?: string | undefined;
}

export class AdminWalletDTO implements IAdminWalletDTO {
    id?: string;
    walletType?: string | undefined;
    wallet?: string | undefined;

    constructor(data?: IAdminWalletDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.walletType = _data["walletType"];
            this.wallet = _data["wallet"];
        }
    }

    static fromJS(data: any): AdminWalletDTO {
        data = typeof data === 'object' ? data : {};
        let result = new AdminWalletDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["walletType"] = this.walletType;
        data["wallet"] = this.wallet;
        return data; 
    }
}

export interface IAdminWalletDTO {
    id?: string;
    walletType?: string | undefined;
    wallet?: string | undefined;
}

export class CreateBlockedWallet implements ICreateBlockedWallet {
    wallet?: string | undefined;

    constructor(data?: ICreateBlockedWallet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.wallet = _data["wallet"];
        }
    }

    static fromJS(data: any): CreateBlockedWallet {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBlockedWallet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["wallet"] = this.wallet;
        return data; 
    }
}

export interface ICreateBlockedWallet {
    wallet?: string | undefined;
}

export class BlockedWalletDTO implements IBlockedWalletDTO {
    id?: string;
    wallet?: string | undefined;

    constructor(data?: IBlockedWalletDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.wallet = _data["wallet"];
        }
    }

    static fromJS(data: any): BlockedWalletDTO {
        data = typeof data === 'object' ? data : {};
        let result = new BlockedWalletDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["wallet"] = this.wallet;
        return data; 
    }
}

export interface IBlockedWalletDTO {
    id?: string;
    wallet?: string | undefined;
}

export class UpdateGeneralSettingsCommand implements IUpdateGeneralSettingsCommand {
    minValue?: number;
    maxValue?: number;
    exchangePercentage?: number;
    siteName?: string | undefined;

    constructor(data?: IUpdateGeneralSettingsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.minValue = _data["minValue"];
            this.maxValue = _data["maxValue"];
            this.exchangePercentage = _data["exchangePercentage"];
            this.siteName = _data["siteName"];
        }
    }

    static fromJS(data: any): UpdateGeneralSettingsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateGeneralSettingsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["minValue"] = this.minValue;
        data["maxValue"] = this.maxValue;
        data["exchangePercentage"] = this.exchangePercentage;
        data["siteName"] = this.siteName;
        return data; 
    }
}

export interface IUpdateGeneralSettingsCommand {
    minValue?: number;
    maxValue?: number;
    exchangePercentage?: number;
    siteName?: string | undefined;
}

export class GeneralSettingDTO implements IGeneralSettingDTO {
    minValue?: number;
    maxValue?: number;
    exchangePercentage?: number;
    siteName?: string | undefined;

    constructor(data?: IGeneralSettingDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.minValue = _data["minValue"];
            this.maxValue = _data["maxValue"];
            this.exchangePercentage = _data["exchangePercentage"];
            this.siteName = _data["siteName"];
        }
    }

    static fromJS(data: any): GeneralSettingDTO {
        data = typeof data === 'object' ? data : {};
        let result = new GeneralSettingDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["minValue"] = this.minValue;
        data["maxValue"] = this.maxValue;
        data["exchangePercentage"] = this.exchangePercentage;
        data["siteName"] = this.siteName;
        return data; 
    }
}

export interface IGeneralSettingDTO {
    minValue?: number;
    maxValue?: number;
    exchangePercentage?: number;
    siteName?: string | undefined;
}

export class AuthResponse implements IAuthResponse {
    result?: Result | undefined;
    tokensPair?: TokensPair | undefined;

    constructor(data?: IAuthResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? Result.fromJS(_data["result"]) : <any>undefined;
            this.tokensPair = _data["tokensPair"] ? TokensPair.fromJS(_data["tokensPair"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AuthResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AuthResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["tokensPair"] = this.tokensPair ? this.tokensPair.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IAuthResponse {
    result?: Result | undefined;
    tokensPair?: TokensPair | undefined;
}

export class TokensPair implements ITokensPair {
    accessToken?: string | undefined;
    refreshToken?: RefreshToken | undefined;

    constructor(data?: ITokensPair) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
            this.refreshToken = _data["refreshToken"] ? RefreshToken.fromJS(_data["refreshToken"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TokensPair {
        data = typeof data === 'object' ? data : {};
        let result = new TokensPair();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["refreshToken"] = this.refreshToken ? this.refreshToken.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ITokensPair {
    accessToken?: string | undefined;
    refreshToken?: RefreshToken | undefined;
}

export class RefreshToken implements IRefreshToken {
    token?: string;
    jti?: string | undefined;
    expires?: Date;
    created?: Date;
    revoked?: Date | undefined;
    applicationUserId?: string | undefined;
    applicationUser?: ApplicationUser | undefined;

    constructor(data?: IRefreshToken) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
            this.jti = _data["jti"];
            this.expires = _data["expires"] ? new Date(_data["expires"].toString()) : <any>undefined;
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.revoked = _data["revoked"] ? new Date(_data["revoked"].toString()) : <any>undefined;
            this.applicationUserId = _data["applicationUserId"];
            this.applicationUser = _data["applicationUser"] ? ApplicationUser.fromJS(_data["applicationUser"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RefreshToken {
        data = typeof data === 'object' ? data : {};
        let result = new RefreshToken();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        data["jti"] = this.jti;
        data["expires"] = this.expires ? this.expires.toISOString() : <any>undefined;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["revoked"] = this.revoked ? this.revoked.toISOString() : <any>undefined;
        data["applicationUserId"] = this.applicationUserId;
        data["applicationUser"] = this.applicationUser ? this.applicationUser.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IRefreshToken {
    token?: string;
    jti?: string | undefined;
    expires?: Date;
    created?: Date;
    revoked?: Date | undefined;
    applicationUserId?: string | undefined;
    applicationUser?: ApplicationUser | undefined;
}

export class IdentityUserOfString implements IIdentityUserOfString {
    id?: string | undefined;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed?: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean;
    twoFactorEnabled?: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;

    constructor(data?: IIdentityUserOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.normalizedUserName = _data["normalizedUserName"];
            this.email = _data["email"];
            this.normalizedEmail = _data["normalizedEmail"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.passwordHash = _data["passwordHash"];
            this.securityStamp = _data["securityStamp"];
            this.concurrencyStamp = _data["concurrencyStamp"];
            this.phoneNumber = _data["phoneNumber"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : <any>undefined;
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.accessFailedCount = _data["accessFailedCount"];
        }
    }

    static fromJS(data: any): IdentityUserOfString {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUserOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["normalizedUserName"] = this.normalizedUserName;
        data["email"] = this.email;
        data["normalizedEmail"] = this.normalizedEmail;
        data["emailConfirmed"] = this.emailConfirmed;
        data["passwordHash"] = this.passwordHash;
        data["securityStamp"] = this.securityStamp;
        data["concurrencyStamp"] = this.concurrencyStamp;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        return data; 
    }
}

export interface IIdentityUserOfString {
    id?: string | undefined;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed?: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean;
    twoFactorEnabled?: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;
}

export class IdentityUser extends IdentityUserOfString implements IIdentityUser {

    constructor(data?: IIdentityUser) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): IdentityUser {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUser();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IIdentityUser extends IIdentityUserOfString {
}

export class ApplicationUser extends IdentityUser implements IApplicationUser {
    refreshTokens?: RefreshToken[] | undefined;
    referId?: string | undefined;
    balanceFake?: number;
    balanceReal?: number;
    income?: number;
    isVerified?: boolean;
    isPremium?: boolean;
    telegramId?: string | undefined;
    btcAddress?: string | undefined;

    constructor(data?: IApplicationUser) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["refreshTokens"])) {
                this.refreshTokens = [] as any;
                for (let item of _data["refreshTokens"])
                    this.refreshTokens!.push(RefreshToken.fromJS(item));
            }
            this.referId = _data["referId"];
            this.balanceFake = _data["balanceFake"];
            this.balanceReal = _data["balanceReal"];
            this.income = _data["income"];
            this.isVerified = _data["isVerified"];
            this.isPremium = _data["isPremium"];
            this.telegramId = _data["telegramId"];
            this.btcAddress = _data["btcAddress"];
        }
    }

    static override fromJS(data: any): ApplicationUser {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationUser();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.refreshTokens)) {
            data["refreshTokens"] = [];
            for (let item of this.refreshTokens)
                data["refreshTokens"].push(item.toJSON());
        }
        data["referId"] = this.referId;
        data["balanceFake"] = this.balanceFake;
        data["balanceReal"] = this.balanceReal;
        data["income"] = this.income;
        data["isVerified"] = this.isVerified;
        data["isPremium"] = this.isPremium;
        data["telegramId"] = this.telegramId;
        data["btcAddress"] = this.btcAddress;
        super.toJSON(data);
        return data; 
    }
}

export interface IApplicationUser extends IIdentityUser {
    refreshTokens?: RefreshToken[] | undefined;
    referId?: string | undefined;
    balanceFake?: number;
    balanceReal?: number;
    income?: number;
    isVerified?: boolean;
    isPremium?: boolean;
    telegramId?: string | undefined;
    btcAddress?: string | undefined;
}

export class SignUpCommand implements ISignUpCommand {
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: ISignUpCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): SignUpCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SignUpCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data; 
    }
}

export interface ISignUpCommand {
    email?: string | undefined;
    password?: string | undefined;
}

export class SignInCommand implements ISignInCommand {
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: ISignInCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): SignInCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SignInCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data; 
    }
}

export interface ISignInCommand {
    email?: string | undefined;
    password?: string | undefined;
}

export class OrderCreate implements IOrderCreate {
    country?: string | undefined;
    ip?: string | undefined;
    wallet?: string | undefined;
    walletType?: string | undefined;
    email?: string | undefined;
    promo?: string | undefined;
    value?: number;
    creationTime?: string | undefined;

    constructor(data?: IOrderCreate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.country = _data["country"];
            this.ip = _data["ip"];
            this.wallet = _data["wallet"];
            this.walletType = _data["walletType"];
            this.email = _data["email"];
            this.promo = _data["promo"];
            this.value = _data["value"];
            this.creationTime = _data["creationTime"];
        }
    }

    static fromJS(data: any): OrderCreate {
        data = typeof data === 'object' ? data : {};
        let result = new OrderCreate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["country"] = this.country;
        data["ip"] = this.ip;
        data["wallet"] = this.wallet;
        data["walletType"] = this.walletType;
        data["email"] = this.email;
        data["promo"] = this.promo;
        data["value"] = this.value;
        data["creationTime"] = this.creationTime;
        return data; 
    }
}

export interface IOrderCreate {
    country?: string | undefined;
    ip?: string | undefined;
    wallet?: string | undefined;
    walletType?: string | undefined;
    email?: string | undefined;
    promo?: string | undefined;
    value?: number;
    creationTime?: string | undefined;
}

export class Order implements IOrder {
    id?: string;
    country?: string | undefined;
    ip?: string | undefined;
    wallet?: string | undefined;
    walletType?: string | undefined;
    email?: string | undefined;
    promo?: string | undefined;
    value?: string | undefined;
    creationTime?: string | undefined;

    constructor(data?: IOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.country = _data["country"];
            this.ip = _data["ip"];
            this.wallet = _data["wallet"];
            this.walletType = _data["walletType"];
            this.email = _data["email"];
            this.promo = _data["promo"];
            this.value = _data["value"];
            this.creationTime = _data["creationTime"];
        }
    }

    static fromJS(data: any): Order {
        data = typeof data === 'object' ? data : {};
        let result = new Order();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["country"] = this.country;
        data["ip"] = this.ip;
        data["wallet"] = this.wallet;
        data["walletType"] = this.walletType;
        data["email"] = this.email;
        data["promo"] = this.promo;
        data["value"] = this.value;
        data["creationTime"] = this.creationTime;
        return data; 
    }
}

export interface IOrder {
    id?: string;
    country?: string | undefined;
    ip?: string | undefined;
    wallet?: string | undefined;
    walletType?: string | undefined;
    email?: string | undefined;
    promo?: string | undefined;
    value?: string | undefined;
    creationTime?: string | undefined;
}

export class CreatePromocode implements ICreatePromocode {
    code?: string | undefined;
    activeFrom?: number;
    bonus?: number;

    constructor(data?: ICreatePromocode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.activeFrom = _data["activeFrom"];
            this.bonus = _data["bonus"];
        }
    }

    static fromJS(data: any): CreatePromocode {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePromocode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["activeFrom"] = this.activeFrom;
        data["bonus"] = this.bonus;
        return data; 
    }
}

export interface ICreatePromocode {
    code?: string | undefined;
    activeFrom?: number;
    bonus?: number;
}

export class PromocodeDTO implements IPromocodeDTO {
    id?: string;
    code?: string | undefined;
    activeFrom?: number;
    bonus?: number;

    constructor(data?: IPromocodeDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.activeFrom = _data["activeFrom"];
            this.bonus = _data["bonus"];
        }
    }

    static fromJS(data: any): PromocodeDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PromocodeDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["activeFrom"] = this.activeFrom;
        data["bonus"] = this.bonus;
        return data; 
    }
}

export interface IPromocodeDTO {
    id?: string;
    code?: string | undefined;
    activeFrom?: number;
    bonus?: number;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return throwError(result);
    else
        return throwError(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}